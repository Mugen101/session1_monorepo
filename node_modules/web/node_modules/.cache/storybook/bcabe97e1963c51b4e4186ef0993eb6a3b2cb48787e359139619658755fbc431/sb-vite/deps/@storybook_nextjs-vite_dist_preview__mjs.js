import {
  require_config
} from "./chunk-LZTB5UPS.js";
import {
  require_styled_jsx
} from "./chunk-A34KJPMD.js";
import "./chunk-TKD5ZVUR.js";
import {
  ImageContext
} from "./chunk-UZ3FXEF4.js";
import {
  require_redirect_boundary
} from "./chunk-UKFWKHG5.js";
import {
  require_head_manager
} from "./chunk-OSKTA3A6.js";
import {
  createNavigation,
  getRouter,
  navigation_exports
} from "./chunk-7UL2VOWQ.js";
import "./chunk-JB5LOGPU.js";
import {
  require_app_router_context_shared_runtime
} from "./chunk-53BJVM57.js";
import {
  require_hooks_client_context_shared_runtime
} from "./chunk-FIXEA2RB.js";
import {
  require_is_next_router_error
} from "./chunk-MWY5XAAS.js";
import {
  createRouter,
  getRouter as getRouter2,
  router_exports
} from "./chunk-EBH3AHWQ.js";
import "./chunk-BTJZT3TQ.js";
import "./chunk-UV4QD7JX.js";
import {
  require_head_manager_context_shared_runtime
} from "./chunk-YI4JJIIC.js";
import {
  require_router_context_shared_runtime
} from "./chunk-JTNJNRUO.js";
import "./chunk-IKWK4IZS.js";
import {
  require_segment
} from "./chunk-BAXYWJ24.js";
import "./chunk-WTVNDCGB.js";
import "./chunk-VM3V42B4.js";
import "./chunk-ETZZYZXN.js";
import "./chunk-AEPWJNC3.js";
import "./chunk-XBBVD6EC.js";
import {
  require_react
} from "./chunk-MXUKRW2K.js";
import "./chunk-KPQ3Y25L.js";
import {
  __toESM
} from "./chunk-TM6AOUSD.js";

// node_modules/@storybook/nextjs-vite/dist/chunk-GKRSUUNG.mjs
var React = __toESM(require_react(), 1);
var ImageDecorator = (Story, { parameters: parameters2 }) => parameters2.nextjs?.image ? React.createElement(ImageContext.Provider, { value: parameters2.nextjs.image }, React.createElement(Story, null)) : React.createElement(Story, null);

// node_modules/@storybook/nextjs-vite/dist/chunk-XP5HYGXS.mjs
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};

// node_modules/@storybook/nextjs-vite/dist/chunk-J3BB7LEU.mjs
var import_is_next_router_error = __toESM(require_is_next_router_error(), 1);
var import_config = __toESM(require_config(), 1);
var React3 = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);
var import_head_manager = __toESM(require_head_manager(), 1);
var import_head_manager_context = __toESM(require_head_manager_context_shared_runtime(), 1);
var import_redirect_boundary = __toESM(require_redirect_boundary(), 1);
var import_app_router_context = __toESM(require_app_router_context_shared_runtime(), 1);
var import_hooks_client_context = __toESM(require_hooks_client_context_shared_runtime(), 1);
var import_segment = __toESM(require_segment(), 1);
var import_router_context = __toESM(require_router_context_shared_runtime(), 1);
var import_styled_jsx = __toESM(require_styled_jsx(), 1);
var preview_exports = {};
__export(preview_exports, { decorators: () => decorators, loaders: () => loaders, parameters: () => parameters });
(0, import_config.setConfig)(process.env.__NEXT_RUNTIME_CONFIG);
var HeadManagerProvider = ({ children }) => {
  let headManager = (0, import_react.useMemo)(import_head_manager.default, []);
  return headManager.getIsSsr = () => false, import_react.default.createElement(import_head_manager_context.HeadManagerContext.Provider, { value: headManager }, children);
};
var head_manager_provider_default = HeadManagerProvider;
var HeadManagerDecorator = (Story) => React3.createElement(head_manager_provider_default, null, React3.createElement(Story, null));
var getParallelRoutes = (segmentsList) => {
  let segment = segmentsList.shift();
  return segment ? [segment, { children: getParallelRoutes(segmentsList) }] : [];
};
var AppRouterProvider = ({ children, routeParams }) => {
  let { pathname, query, segments = [] } = routeParams, tree = [pathname, { children: getParallelRoutes([...segments]) }], pathParams = (0, import_react.useMemo)(() => {
    let params = {}, currentSegments = routeParams.segments;
    if (currentSegments) {
      if (Array.isArray(currentSegments)) {
        for (let segmentEntry of currentSegments) if (Array.isArray(segmentEntry) && segmentEntry.length === 2 && typeof segmentEntry[0] == "string") {
          let key = segmentEntry[0], value = segmentEntry[1];
          params[key] = value;
        }
      } else if (typeof currentSegments == "object" && !Array.isArray(currentSegments)) {
        let segmentObject = currentSegments;
        for (let key in segmentObject) Object.prototype.hasOwnProperty.call(segmentObject, key) && (params[key] = segmentObject[key]);
      }
    }
    return params;
  }, [routeParams.segments]), newLazyCacheNode = { lazyData: null, rsc: null, prefetchRsc: null, head: null, prefetchHead: null, parallelRoutes: /* @__PURE__ */ new Map(), loading: null };
  return import_react.default.createElement(import_hooks_client_context.PathParamsContext.Provider, { value: pathParams }, import_react.default.createElement(import_hooks_client_context.PathnameContext.Provider, { value: pathname }, import_react.default.createElement(import_hooks_client_context.SearchParamsContext.Provider, { value: new URLSearchParams(query) }, import_react.default.createElement(import_app_router_context.GlobalLayoutRouterContext.Provider, { value: { changeByServerResponse() {
  }, buildId: "storybook", tree, focusAndScrollRef: { apply: false, hashFragment: null, segmentPaths: [tree], onlyHashChange: false }, nextUrl: pathname } }, import_react.default.createElement(import_app_router_context.AppRouterContext.Provider, { value: getRouter() }, import_react.default.createElement(import_app_router_context.LayoutRouterContext.Provider, { value: { childNodes: /* @__PURE__ */ new Map(), tree, parentTree: tree, parentCacheNode: newLazyCacheNode, url: pathname, loading: null } }, children))))));
};
var PageRouterProvider = ({ children }) => import_react.default.createElement(import_router_context.RouterContext.Provider, { value: getRouter2() }, children);
var defaultRouterParams = { pathname: "/", query: {} };
var RouterDecorator = (Story, { parameters: parameters2 }) => parameters2.nextjs?.appDirectory ?? false ? AppRouterProvider ? React3.createElement(AppRouterProvider, { routeParams: { ...defaultRouterParams, ...parameters2.nextjs?.navigation } }, React3.createElement(import_redirect_boundary.RedirectBoundary, null, React3.createElement(Story, null))) : null : React3.createElement(PageRouterProvider, null, React3.createElement(Story, null));
var StyledJsxDecorator = (Story) => React3.createElement(import_styled_jsx.StyleRegistry, null, React3.createElement(Story, null));
function addNextHeadCount() {
  let meta = document.createElement("meta");
  meta.name = "next-head-count", meta.content = "0", document.head.appendChild(meta);
}
function isAsyncClientComponentError(error) {
  return typeof error == "string" && (error.includes("Only Server Components can be async at the moment.") || error.includes("A component was suspended by an uncached promise.") || error.includes("async/await is not yet supported in Client Components"));
}
addNextHeadCount();
var origConsoleError = globalThis.console.error;
globalThis.console.error = (...args) => {
  let error = args[0];
  (0, import_is_next_router_error.isNextRouterError)(error) || isAsyncClientComponentError(error) || origConsoleError.apply(globalThis.console, args);
};
globalThis.addEventListener("error", (ev) => {
  if ((0, import_is_next_router_error.isNextRouterError)(ev.error) || isAsyncClientComponentError(ev.error)) {
    ev.preventDefault();
    return;
  }
});
var asDecorator = (decorator) => decorator;
var decorators = [asDecorator(StyledJsxDecorator), asDecorator(ImageDecorator), asDecorator(RouterDecorator), asDecorator(HeadManagerDecorator)];
var loaders = async ({ globals, parameters: parameters2 }) => {
  let { router, appDirectory } = parameters2.nextjs ?? {};
  appDirectory ? createNavigation(router) : createRouter({ locale: globals.locale, ...router });
};
var parameters = { docs: { source: { excludeDecorators: true } }, react: { rootOptions: { onCaughtError(error) {
  (0, import_is_next_router_error.isNextRouterError)(error) || console.error(error);
} } } };
export {
  decorators,
  loaders,
  parameters
};
//# sourceMappingURL=@storybook_nextjs-vite_dist_preview__mjs.js.map
