{
  "version": 3,
  "sources": ["../../../../../vite-plugin-storybook-nextjs/dist/plugins/next-mocks/alias/navigation/index.js"],
  "sourcesContent": ["import * as actual from 'next/dist/client/components/navigation.js';\nexport * from 'next/dist/client/components/navigation.js';\nimport { RedirectStatusCode } from 'next/dist/client/components/redirect-status-code.js';\nimport { getRedirectError } from 'next/dist/client/components/redirect.js';\nimport { NextjsRouterMocksNotAvailable } from 'storybook/internal/preview-errors';\nimport { fn } from 'storybook/test';\n\n// src/plugins/next-mocks/alias/navigation/index.ts\nvar navigationAPI;\nvar createNavigation = (overrides) => {\n  const navigationActions = {\n    push: fn().mockName(\"next/navigation::useRouter().push\"),\n    replace: fn().mockName(\"next/navigation::useRouter().replace\"),\n    forward: fn().mockName(\"next/navigation::useRouter().forward\"),\n    back: fn().mockName(\"next/navigation::useRouter().back\"),\n    prefetch: fn().mockName(\"next/navigation::useRouter().prefetch\"),\n    refresh: fn().mockName(\"next/navigation::useRouter().refresh\")\n  };\n  if (overrides) {\n    for (const key of Object.keys(navigationActions)) {\n      if (key in overrides) {\n        navigationActions[key] = fn((...args) => {\n          return overrides[key](...args);\n        }).mockName(`useRouter().${key}`);\n      }\n    }\n  }\n  navigationAPI = navigationActions;\n  return navigationAPI;\n};\nvar getRouter = () => {\n  if (!navigationAPI) {\n    throw new NextjsRouterMocksNotAvailable({\n      importType: \"next/navigation\"\n    });\n  }\n  return navigationAPI;\n};\nvar redirect = fn(\n  (url, type = actual.RedirectType.push) => {\n    throw getRedirectError(url, type, RedirectStatusCode.SeeOther);\n  }\n).mockName(\"next/navigation::redirect\");\nvar permanentRedirect = fn(\n  (url, type = actual.RedirectType.push) => {\n    throw getRedirectError(url, type, RedirectStatusCode.SeeOther);\n  }\n).mockName(\"next/navigation::permanentRedirect\");\nvar useSearchParams2 = fn(\n  actual.useSearchParams\n).mockName(\"next/navigation::useSearchParams\");\nvar usePathname2 = fn(actual.usePathname).mockName(\n  \"next/navigation::usePathname\"\n);\nvar useSelectedLayoutSegment2 = fn(actual.useSelectedLayoutSegment).mockName(\n  \"next/navigation::useSelectedLayoutSegment\"\n);\nvar useSelectedLayoutSegments2 = fn(actual.useSelectedLayoutSegments).mockName(\n  \"next/navigation::useSelectedLayoutSegments\"\n);\nvar useRouter2 = fn(\n  actual.useRouter\n).mockName(\"next/navigation::useRouter\");\nvar useServerInsertedHTML2 = fn(actual.useServerInsertedHTML).mockName(\n  \"next/navigation::useServerInsertedHTML\"\n);\nvar notFound2 = fn(actual.notFound).mockName(\n  \"next/navigation::notFound\"\n);\nvar useParams2 = fn(\n  actual.useParams\n).mockName(\"next/navigation::useParams\");\n\nexport { createNavigation, getRouter, notFound2 as notFound, permanentRedirect, redirect, useParams2 as useParams, usePathname2 as usePathname, useRouter2 as useRouter, useSearchParams2 as useSearchParams, useSelectedLayoutSegment2 as useSelectedLayoutSegment, useSelectedLayoutSegments2 as useSelectedLayoutSegments, useServerInsertedHTML2 as useServerInsertedHTML };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,+BAAc;AACd,kCAAmC;AACnC,sBAAiC;AACjC,4BAA8C;AAC9C,kBAAmB;AAGnB,IAAI;AACJ,IAAI,mBAAmB,CAAC,cAAc;AACpC,QAAM,oBAAoB;AAAA,IACxB,UAAM,gBAAG,EAAE,SAAS,mCAAmC;AAAA,IACvD,aAAS,gBAAG,EAAE,SAAS,sCAAsC;AAAA,IAC7D,aAAS,gBAAG,EAAE,SAAS,sCAAsC;AAAA,IAC7D,UAAM,gBAAG,EAAE,SAAS,mCAAmC;AAAA,IACvD,cAAU,gBAAG,EAAE,SAAS,uCAAuC;AAAA,IAC/D,aAAS,gBAAG,EAAE,SAAS,sCAAsC;AAAA,EAC/D;AACA,MAAI,WAAW;AACb,eAAW,OAAO,OAAO,KAAK,iBAAiB,GAAG;AAChD,UAAI,OAAO,WAAW;AACpB,0BAAkB,GAAG,QAAI,gBAAG,IAAI,SAAS;AACvC,iBAAO,UAAU,GAAG,EAAE,GAAG,IAAI;AAAA,QAC/B,CAAC,EAAE,SAAS,eAAe,GAAG,EAAE;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AACA,kBAAgB;AAChB,SAAO;AACT;AACA,IAAI,YAAY,MAAM;AACpB,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,oDAA8B;AAAA,MACtC,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AACA,SAAO;AACT;AACA,IAAI,eAAW;AAAA,EACb,CAAC,KAAK,OAAc,oBAAa,SAAS;AACxC,cAAM,kCAAiB,KAAK,MAAM,+CAAmB,QAAQ;AAAA,EAC/D;AACF,EAAE,SAAS,2BAA2B;AACtC,IAAI,wBAAoB;AAAA,EACtB,CAAC,KAAK,OAAc,oBAAa,SAAS;AACxC,cAAM,kCAAiB,KAAK,MAAM,+CAAmB,QAAQ;AAAA,EAC/D;AACF,EAAE,SAAS,oCAAoC;AAC/C,IAAI,uBAAmB;AAAA,EACd;AACT,EAAE,SAAS,kCAAkC;AAC7C,IAAI,mBAAe,gBAAU,kBAAW,EAAE;AAAA,EACxC;AACF;AACA,IAAI,gCAA4B,gBAAU,+BAAwB,EAAE;AAAA,EAClE;AACF;AACA,IAAI,iCAA6B,gBAAU,gCAAyB,EAAE;AAAA,EACpE;AACF;AACA,IAAI,iBAAa;AAAA,EACR;AACT,EAAE,SAAS,4BAA4B;AACvC,IAAI,6BAAyB,gBAAU,4BAAqB,EAAE;AAAA,EAC5D;AACF;AACA,IAAI,gBAAY,gBAAU,eAAQ,EAAE;AAAA,EAClC;AACF;AACA,IAAI,iBAAa;AAAA,EACR;AACT,EAAE,SAAS,4BAA4B;",
  "names": []
}
