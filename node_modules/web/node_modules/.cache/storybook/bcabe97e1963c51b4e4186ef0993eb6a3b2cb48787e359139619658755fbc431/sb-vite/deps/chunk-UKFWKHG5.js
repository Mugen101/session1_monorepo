import {
  require_navigation,
  require_redirect
} from "./chunk-JB5LOGPU.js";
import {
  require_redirect_error
} from "./chunk-MWY5XAAS.js";
import {
  require_interop_require_wildcard
} from "./chunk-WTVNDCGB.js";
import {
  require_jsx_runtime
} from "./chunk-ETZZYZXN.js";
import {
  require_react
} from "./chunk-MXUKRW2K.js";
import {
  __commonJS
} from "./chunk-TM6AOUSD.js";

// ../../node_modules/next/dist/client/components/redirect-boundary.js
var require_redirect_boundary = __commonJS({
  "../../node_modules/next/dist/client/components/redirect-boundary.js"(exports, module) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      RedirectBoundary: function() {
        return RedirectBoundary;
      },
      RedirectErrorBoundary: function() {
        return RedirectErrorBoundary;
      }
    });
    var _interop_require_wildcard = require_interop_require_wildcard();
    var _jsxruntime = require_jsx_runtime();
    var _react = _interop_require_wildcard._(require_react());
    var _navigation = require_navigation();
    var _redirect = require_redirect();
    var _redirecterror = require_redirect_error();
    function HandleRedirect(param) {
      let { redirect, reset, redirectType } = param;
      const router = (0, _navigation.useRouter)();
      (0, _react.useEffect)(() => {
        _react.default.startTransition(() => {
          if (redirectType === _redirecterror.RedirectType.push) {
            router.push(redirect, {});
          } else {
            router.replace(redirect, {});
          }
          reset();
        });
      }, [
        redirect,
        redirectType,
        reset,
        router
      ]);
      return null;
    }
    var RedirectErrorBoundary = class extends _react.default.Component {
      static getDerivedStateFromError(error) {
        if ((0, _redirecterror.isRedirectError)(error)) {
          const url = (0, _redirect.getURLFromRedirectError)(error);
          const redirectType = (0, _redirect.getRedirectTypeFromError)(error);
          return {
            redirect: url,
            redirectType
          };
        }
        throw error;
      }
      // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.
      render() {
        const { redirect, redirectType } = this.state;
        if (redirect !== null && redirectType !== null) {
          return (0, _jsxruntime.jsx)(HandleRedirect, {
            redirect,
            redirectType,
            reset: () => this.setState({
              redirect: null
            })
          });
        }
        return this.props.children;
      }
      constructor(props) {
        super(props);
        this.state = {
          redirect: null,
          redirectType: null
        };
      }
    };
    function RedirectBoundary(param) {
      let { children } = param;
      const router = (0, _navigation.useRouter)();
      return (0, _jsxruntime.jsx)(RedirectErrorBoundary, {
        router,
        children
      });
    }
    if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
      Object.defineProperty(exports.default, "__esModule", { value: true });
      Object.assign(exports.default, exports);
      module.exports = exports.default;
    }
  }
});

export {
  require_redirect_boundary
};
//# sourceMappingURL=chunk-UKFWKHG5.js.map
