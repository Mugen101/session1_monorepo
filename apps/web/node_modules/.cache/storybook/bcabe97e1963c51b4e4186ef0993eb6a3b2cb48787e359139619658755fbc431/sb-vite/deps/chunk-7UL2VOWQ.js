import {
  require_navigation,
  require_redirect
} from "./chunk-JB5LOGPU.js";
import {
  require_redirect_status_code
} from "./chunk-MWY5XAAS.js";
import {
  require_test
} from "./chunk-XBBVD6EC.js";
import {
  require_preview_errors
} from "./chunk-KPQ3Y25L.js";
import {
  __export,
  __reExport,
  __toESM
} from "./chunk-TM6AOUSD.js";

// node_modules/vite-plugin-storybook-nextjs/dist/plugins/next-mocks/alias/navigation/index.js
var navigation_exports = {};
__export(navigation_exports, {
  createNavigation: () => createNavigation,
  getRouter: () => getRouter,
  notFound: () => notFound2,
  permanentRedirect: () => permanentRedirect,
  redirect: () => redirect,
  useParams: () => useParams2,
  usePathname: () => usePathname2,
  useRouter: () => useRouter2,
  useSearchParams: () => useSearchParams2,
  useSelectedLayoutSegment: () => useSelectedLayoutSegment2,
  useSelectedLayoutSegments: () => useSelectedLayoutSegments2,
  useServerInsertedHTML: () => useServerInsertedHTML2
});
var actual = __toESM(require_navigation());
__reExport(navigation_exports, __toESM(require_navigation()));
var import_redirect_status_code = __toESM(require_redirect_status_code());
var import_redirect = __toESM(require_redirect());
var import_preview_errors = __toESM(require_preview_errors());
var import_test = __toESM(require_test());
var navigationAPI;
var createNavigation = (overrides) => {
  const navigationActions = {
    push: (0, import_test.fn)().mockName("next/navigation::useRouter().push"),
    replace: (0, import_test.fn)().mockName("next/navigation::useRouter().replace"),
    forward: (0, import_test.fn)().mockName("next/navigation::useRouter().forward"),
    back: (0, import_test.fn)().mockName("next/navigation::useRouter().back"),
    prefetch: (0, import_test.fn)().mockName("next/navigation::useRouter().prefetch"),
    refresh: (0, import_test.fn)().mockName("next/navigation::useRouter().refresh")
  };
  if (overrides) {
    for (const key of Object.keys(navigationActions)) {
      if (key in overrides) {
        navigationActions[key] = (0, import_test.fn)((...args) => {
          return overrides[key](...args);
        }).mockName(`useRouter().${key}`);
      }
    }
  }
  navigationAPI = navigationActions;
  return navigationAPI;
};
var getRouter = () => {
  if (!navigationAPI) {
    throw new import_preview_errors.NextjsRouterMocksNotAvailable({
      importType: "next/navigation"
    });
  }
  return navigationAPI;
};
var redirect = (0, import_test.fn)(
  (url, type = actual.RedirectType.push) => {
    throw (0, import_redirect.getRedirectError)(url, type, import_redirect_status_code.RedirectStatusCode.SeeOther);
  }
).mockName("next/navigation::redirect");
var permanentRedirect = (0, import_test.fn)(
  (url, type = actual.RedirectType.push) => {
    throw (0, import_redirect.getRedirectError)(url, type, import_redirect_status_code.RedirectStatusCode.SeeOther);
  }
).mockName("next/navigation::permanentRedirect");
var useSearchParams2 = (0, import_test.fn)(
  actual.useSearchParams
).mockName("next/navigation::useSearchParams");
var usePathname2 = (0, import_test.fn)(actual.usePathname).mockName(
  "next/navigation::usePathname"
);
var useSelectedLayoutSegment2 = (0, import_test.fn)(actual.useSelectedLayoutSegment).mockName(
  "next/navigation::useSelectedLayoutSegment"
);
var useSelectedLayoutSegments2 = (0, import_test.fn)(actual.useSelectedLayoutSegments).mockName(
  "next/navigation::useSelectedLayoutSegments"
);
var useRouter2 = (0, import_test.fn)(
  actual.useRouter
).mockName("next/navigation::useRouter");
var useServerInsertedHTML2 = (0, import_test.fn)(actual.useServerInsertedHTML).mockName(
  "next/navigation::useServerInsertedHTML"
);
var notFound2 = (0, import_test.fn)(actual.notFound).mockName(
  "next/navigation::notFound"
);
var useParams2 = (0, import_test.fn)(
  actual.useParams
).mockName("next/navigation::useParams");

export {
  createNavigation,
  getRouter,
  redirect,
  permanentRedirect,
  useSearchParams2,
  usePathname2,
  useSelectedLayoutSegment2,
  useSelectedLayoutSegments2,
  useRouter2,
  useServerInsertedHTML2,
  notFound2,
  useParams2,
  navigation_exports
};
//# sourceMappingURL=chunk-7UL2VOWQ.js.map
