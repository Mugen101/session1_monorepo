{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/next/src/client/head-manager.ts"],
  "sourcesContent": ["import { setAttributesFromProps } from './set-attributes-from-props'\n\nimport type { JSX } from 'react'\n\nfunction reactElementToDOM({ type, props }: JSX.Element): HTMLElement {\n  const el: HTMLElement = document.createElement(type)\n  setAttributesFromProps(el, props)\n\n  const { children, dangerouslySetInnerHTML } = props\n  if (dangerouslySetInnerHTML) {\n    el.innerHTML = dangerouslySetInnerHTML.__html || ''\n  } else if (children) {\n    el.textContent =\n      typeof children === 'string'\n        ? children\n        : Array.isArray(children)\n          ? children.join('')\n          : ''\n  }\n  return el\n}\n\n/**\n * When a `nonce` is present on an element, browsers such as Chrome and Firefox strip it out of the\n * actual HTML attributes for security reasons *when the element is added to the document*. Thus,\n * given two equivalent elements that have nonces, `Element,isEqualNode()` will return false if one\n * of those elements gets added to the document. Although the `element.nonce` property will be the\n * same for both elements, the one that was added to the document will return an empty string for\n * its nonce HTML attribute value.\n *\n * This custom `isEqualNode()` function therefore removes the nonce value from the `newTag` before\n * comparing it to `oldTag`, restoring it afterwards.\n *\n * For more information, see:\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1211471#c12\n */\nexport function isEqualNode(oldTag: Element, newTag: Element) {\n  if (oldTag instanceof HTMLElement && newTag instanceof HTMLElement) {\n    const nonce = newTag.getAttribute('nonce')\n    // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not\n    // be stripped if there is no content security policy response header that includes a nonce.\n    if (nonce && !oldTag.getAttribute('nonce')) {\n      const cloneTag = newTag.cloneNode(true) as typeof newTag\n      cloneTag.setAttribute('nonce', '')\n      cloneTag.nonce = nonce\n      return nonce === oldTag.nonce && oldTag.isEqualNode(cloneTag)\n    }\n  }\n\n  return oldTag.isEqualNode(newTag)\n}\n\nfunction updateElements(type: string, components: JSX.Element[]) {\n  const headEl = document.querySelector('head')\n  if (!headEl) return\n\n  const oldTags = new Set(headEl.querySelectorAll(`${type}[data-next-head]`))\n\n  if (type === 'meta') {\n    const metaCharset = headEl.querySelector('meta[charset]')\n    if (metaCharset !== null) {\n      oldTags.add(metaCharset)\n    }\n  }\n\n  const newTags: Element[] = []\n  for (let i = 0; i < components.length; i++) {\n    const component = components[i]\n    const newTag = reactElementToDOM(component)\n    newTag.setAttribute('data-next-head', '')\n\n    let isNew = true\n    for (const oldTag of oldTags) {\n      if (isEqualNode(oldTag, newTag)) {\n        oldTags.delete(oldTag)\n        isNew = false\n        break\n      }\n    }\n\n    if (isNew) {\n      newTags.push(newTag)\n    }\n  }\n\n  for (const oldTag of oldTags) {\n    oldTag.parentNode?.removeChild(oldTag)\n  }\n\n  for (const newTag of newTags) {\n    // meta[charset] must be first element so special case\n    if (\n      newTag.tagName.toLowerCase() === 'meta' &&\n      newTag.getAttribute('charset') !== null\n    ) {\n      headEl.prepend(newTag)\n    }\n    headEl.appendChild(newTag)\n  }\n}\n\nexport default function initHeadManager(): {\n  mountedInstances: Set<unknown>\n  updateHead: (head: JSX.Element[]) => void\n} {\n  return {\n    mountedInstances: new Set(),\n    updateHead: (head: JSX.Element[]) => {\n      const tags: Record<string, JSX.Element[]> = {}\n\n      head.forEach((h) => {\n        if (\n          // If the font tag is loaded only on client navigation\n          // it won't be inlined. In this case revert to the original behavior\n          h.type === 'link' &&\n          h.props['data-optimized-fonts']\n        ) {\n          if (\n            document.querySelector(`style[data-href=\"${h.props['data-href']}\"]`)\n          ) {\n            return\n          } else {\n            h.props.href = h.props['data-href']\n            h.props['data-href'] = undefined\n          }\n        }\n\n        const components = tags[h.type] || []\n        components.push(h)\n        tags[h.type] = components\n      })\n\n      const titleComponent = tags.title ? tags.title[0] : null\n      let title = ''\n      if (titleComponent) {\n        const { children } = titleComponent.props\n        title =\n          typeof children === 'string'\n            ? children\n            : Array.isArray(children)\n              ? children.join('')\n              : ''\n      }\n      if (title !== document.title) document.title = title\n      ;['meta', 'base', 'link', 'style', 'script'].forEach((type) => {\n        updateElements(type, tags[type] || [])\n      })\n    },\n  }\n}\n"],
  "mappings": "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",
  "names": ["initHeadManager", "isEqualNode", "reactElementToDOM", "type", "props", "el", "document", "createElement", "setAttributesFromProps", "children", "dangerouslySetInnerHTML", "innerHTML", "__html", "textContent", "Array", "isArray", "join", "oldTag", "newTag", "HTMLElement", "nonce", "getAttribute", "cloneTag", "cloneNode", "setAttribute", "updateElements", "components", "headEl", "querySelector", "oldTags", "Set", "querySelectorAll", "metaCharset", "add", "newTags", "i", "length", "component", "isNew", "delete", "push", "parentNode", "removeChild", "tagName", "toLowerCase", "prepend", "appendChild", "mountedInstances", "updateHead", "head", "tags", "forEach", "h", "href", "undefined", "titleComponent", "title"]
}
